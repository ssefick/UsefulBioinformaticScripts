#!/usr/bin/env Rscript

################################################################################

require(argparse)

parser <- ArgumentParser()
# specify our desired options
# by default ArgumentParser will add an help option


parser$add_argument("-i", "--input_vcf", action="store", default="VCF file", dest="input_vcf",
 help="Input %(default)s")

parser$add_argument("-t", "--tabix_index", action="store", default="tabix index", dest="input_tabix",
 help="Input %(default)s")

parser$add_argument("-o", "--output_vcf", action="store", default="Filtered Vcf", dest="output_vcf",
 help="Output %(default)s")

parser$add_argument("-RGQ", "--Reference_Genotype_Quality", action="store", default=30, dest="RGQ_value",
 help="Default: %(default)s")

parser$add_argument("-min_DP", "--min_Depth", action="store", default=5, dest="min_DP",
 help="Default: %(default)s")

parser$add_argument("-max_DP", "--max_Depth", action="store", default=120, dest="max_DP",
 help="Default: %(default)s")

parser$add_argument("-GQ", "--Genotype_Quanlity", action="store", default=20, dest="GQ",
 help="Default: %(default)s")

# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
argv <- parser$parse_args()

#work on logic to catch and stop if min_DP, max_DP, GQ, or RGQ missing
if(argv["input_vcf"][[1]]=="VCF file"){stop("\n\n\n Needs 3 agruments: \n\n Argument 1: .g.vcf file \n Argument2: .g.vcf output file \n\n Argument3: tabix index \n\n\n For full help:\n plot_stats_vcf_CL_ARGS.R --help \n\n\n")}

input <- argv["input_vcf"][[1]]
output <- argv["output_vcf"][[1]]
tabix  <- argv["input_tabix"][[1]]
#filters
RGQ_value <- argv["RGQ_value"][[1]]
min_DP  <- argv["min_DP"][[1]]
max_DP  <- argv["max_DP"][[1]]
GQ  <- argv["GQ"][[1]]
################################################################################



library("VariantAnnotation")

ref <- "rheMac3"

#Added 20161111
#test data 
test <- 1
if(test==1){
x <- readVcf("test.vcf.gz", genome=ref)
#input <- argv["input_vcf"][[1]]
#output <- argv["output_vcf"][[1]]
#RGQ_value <- argv["RGQ_value"][[1]]
#tabix  <- argv["input_tabix"][[1]]
}

##############################################################
##############################################################
##############################################################
#prefilter
#only those that have RGQ
isRGQ <- function(x) {
!(grepl("RGQ", x, fixed=TRUE))
}
##############################################################
##############################################################
##############################################################

##############################################################
##############################################################
##############################################################

######################################################################################################################
#filters
#snps
#"QD < 2.0"; "MQ < 40.0"; "FS > 60.0"; "SOR > 3.0"; "MQRankSum < -12.5"; "ReadPosRankSum < -8.0"; "DP < 5"; "DP > 120"
#indels
#"FS > 200.0"; "ReadPosRankSum < -20.0"; "SOR > 10.0"; "DP < 5"; "DP > 120"  
######################################################################################################################


#RGQ
RGQ_filter <- function(x, value=RGQ_value) {
## Filter on RGQ > value; default is 30

#test <- apply(geno(x)$RGQ>=value, 1, sum)==4

#out <- is.na(test) & test  

out <- apply(geno(x)$RGQ>=value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}

#ADDED 20161111
#GATK HARD FILTERS
#snps are more conservative...
#"QD < 2.0"
QD_filter <- function(x, value=2){

out <- apply(geno(x)$QD>value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}
#"MQ < 40.0"
MQ_filter <- function(x, value=40){

out <- apply(geno(x)$MQ>value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}
#"FS > 60.0"
FS_filter <- function(x, value=60){

out <- apply(geno(x)$FS>value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}
#"SOR > 3.0"
SOR_filter <- function(x, value=3){

out <- apply(geno(x)$SOR<value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}
#"MQRankSum < -12.5"
MQRankSum_filter <- function(x, value=-12.5){

out <- apply(geno(x)$MQRankSum>value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}
#"ReadPosRankSum < -8.0"
ReadPosRankSum_filter <- function(x, value=-8){

out <- apply(geno(x)$ReadPosRankSum>value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}

#"DP < 5"
min_DP_filter <- function(x, value=min_DP){

out <- apply(geno(x)$DP>=value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}

#"DP > 120"
max_DP_filter <- function(x, value=max_DP){

out <- apply(geno(x)$DP<=value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}

#GQ
GQ_filter <- function(x, value=GQ){

out <- apply(geno(x)$GQ>=value, 1, function(x)sum(x, na.rm=TRUE))==4
    
out[is.na(out)] <- TRUE
    
return(out)
    
}
##############################################################
##############################################################
##############################################################

prefilters <- FilterRules(list(RGQ_prefilter=isRGQ))

filters <- FilterRules(list(RGQ_filter=RGQ_filter))

#filters <- FilterRules(list(RGQ_filter=function(x){apply(geno(x)$RGQ>=30, 1, sum)!=4}))


file.gz <- input

file.gz.tbi <- tabix

destination.file <- output

size=10

tabix.file <- open(TabixFile(file.gz, yieldSize=size))
    

#destination.file <- tempfile()

filterVcf(file=tabix.file, genome=ref, destination=destination.file, filters=filters, verbose=TRUE)

close(tabix.file)




















